#!/bin/bash

set -e

usage() {
cat << EOF
usage: $0 [<options>]
       $0 <command> [<options>]

Available commands:
  clean                        delete all files and directories generated by prepare
  help                         show this help
  prepare                      only prepare repository (do not serve or generate)
  generate                     generate the site (into /public by default)
  server                       serve your current site (default to localhost:1313)

Flags:
  -p, --port int               port on which the server will listen (default 1313)
  -D, --[no]buildDrafts        include (or exclude) content marked as draft (default is including for server and excluding for generation)
      --[no]prepare            include (or exclude) the preparation phase ie. retrieve modules and sub repositories (default prepare)
EOF
}

# Default values for parameters

PORT=1313
ENVIRONMENT=production
COMMAND="server"
WITHDRAFTS=
BASEURL=""
PREPARE=true

dir=$(cd -P -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)

cd "$dir/.."

MYTMPDIR="$(mktemp -d)"

if [ -z "$DEBUG" ]; then
  trap 'rm -rf -- "$MYTMPDIR"' EXIT
fi

clean () {
  echo "=====> cleaning phase"
  rm -Rf \
    ./content/* \
    ./package.json \
    ./package-lock.json \
    ./go.sum \
    ./node_modules \
    ./public \
    ./resources 
}

merge_and_delete_temp() {
  local temp_path="$1"
  local merge_path="$2"

  if [[ -f "$merge_path" ]]; then
    yq ea --front-matter=process "select(di == 0) | select(fi == 0) * select(fi == 1)" "$merge_path" "$temp_path" > tmpfile && \
      mv tmpfile "$merge_path"
  else
    cp "$temp_path" "$merge_path"
  fi
  rm "$temp_path"
}

fetch_doc() {
  local repository="$1"
  local branch="$2"
  local remote_dir="$3"
  local local_dir="$4"

  rm -rf "$local_dir"
  mkdir -p "$local_dir"
  rm -rf "${MYTMPDIR:?}/$repository"
  git clone "https://github.com/gatling/$repository.git" --depth 1 --branch "$branch" "$MYTMPDIR/$repository"
  cp -r "$MYTMPDIR/$repository/$remote_dir"/* "$local_dir"
}

add_repository_url() {
  local repository="$1"
  local branch="$2"
  local remote_dir="$3"
  local local_dir="$4"

  main_index="$local_dir/_index.md"
  main_index_tmp=$(mktemp)

  # shellcheck disable=SC2016
  REPOSITORY="$repository" BRANCH="$branch" REMOTE_DIR="$remote_dir" \
    envsubst '${REPOSITORY} ${BRANCH} ${REMOTE_DIR}' < "templates/repository_url.md" > "$main_index_tmp"
  merge_and_delete_temp "$main_index_tmp" "$main_index"
}

hugo_structure() {
  local repository="$1"
  local branch="$2"
  local remote_dir="$3"
  local local_dir="$4"

  fetch_doc "$repository" "$branch" "$remote_dir" "$local_dir"
  add_repository_url "$repository" "$branch" "$remote_dir" "$local_dir"
}

install_dependencies() {
  # envsubst
  apk add gettext

  # yq
  wget https://github.com/mikefarah/yq/releases/download/v4.40.7/yq_linux_amd64.tar.gz -O - |\
    tar xz && mv yq_linux_amd64 /usr/bin/yq

  # global node modules
  npm install -g postcss postcss-cli @fullhuman/postcss-purgecss purgecss-whitelister flexsearch lodash
}

prepare () {
  if [[ "$PREPARE" = true ]]; then
    clean

    echo "=====> prepare phase"

    if [[ "$DOCKER" = true ]]; then
      install_dependencies
    fi

    hugo mod get -u
    hugo mod npm pack
  
    npm install
  
    #               # repository  # branch  # remote            # local
    hugo_structure  "gatling"     "main"    "src/docs/content"  "content"

  else
    echo "=====> skip prepare"
  fi
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case "$key" in
  -h|--help)
    usage
    exit 0
    ;;
  -p|--port)
    PORT="$2"
    shift
    shift
    ;;
  -D|--buildDrafts)
    WITHDRAFTS=true
    shift
    ;;
  --nobuildDrafts)
    WITHDRAFTS=false
    shift
    ;;
  --prepare)
    PREPARE=true
    shift
    ;;
  --noprepare)
    PREPARE=false
    shift
    ;;
  *) # unknown option
    POSITIONAL+=("$1")
    shift
    ;;
esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters

if [[ $# -gt 0 ]]; then
  COMMAND="$1"
  shift
fi

HUGO_OPTS=()
HUGO_OPTS+=(--environment "$ENVIRONMENT")
if [[ "$WITHDRAFTS" = "true" ]]; then
  HUGO_OPTS+=(--buildDrafts)
fi

case "$COMMAND" in
  server)
    prepare
    HUGO_OPTS+=(--port "$PORT")
    hugo server "${HUGO_OPTS[@]}"
    ;;
  prepare)
    prepare
    ;;
  generate)
    prepare
    hugo "${HUGO_OPTS[@]}"
    ;;
  clean)
    clean
    ;;
  *)
    usage
    ;;
esac
